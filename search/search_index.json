{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Spring Modulith Example Documentation","text":"<p>Welcome to the documentation for the Spring Modulith Example project. This site provides an overview of the microservices, their APIs, models, and other key components.</p>"},{"location":"architecture/component-interaction/","title":"Component Interaction","text":"<p>This section will describe how different components of the system interact with each other.</p>"},{"location":"architecture/overview/","title":"Architecture Overview","text":"<p>This section will provide an overview of the system architecture, including diagrams and design decisions.</p>"},{"location":"components/gatewayservice/api/","title":"Gateway Service API","text":"<p>This section will document the API endpoints exposed by the Gateway Service.</p>"},{"location":"components/gatewayservice/overview/","title":"Gateway Service Overview","text":"<p>The Gateway Service acts as the entry point for the application, routing requests to the appropriate microservices. It uses Spring Cloud Gateway for routing and filtering.</p>"},{"location":"components/jobservice/api/","title":"Job Service API","text":"<p>This section will document the API endpoints exposed by the Job Service.</p>"},{"location":"components/jobservice/models/","title":"Job Service Models","text":"<p>This section will document the data models used in the Job Service.</p>"},{"location":"components/jobservice/overview/","title":"Job Service Overview","text":"<p>The Job Service manages job postings, including creating, updating, retrieving, and deleting job entries. It interacts with the database to store job information.</p>"},{"location":"components/notificationservice/event-handlers/","title":"Notification Service Event Handlers","text":"<p>This section will document the event handlers implemented in the Notification Service.</p>"},{"location":"components/notificationservice/overview/","title":"Notification Service Overview","text":"<p>The Notification Service handles sending notifications (e.g., email, SMS) to users based on their subscriptions. It listens for events and processes them accordingly.</p>"},{"location":"components/shared/config/","title":"Shared Configuration","text":"<p>The shared module contains configuration files and utilities that are used across multiple services. This includes database configurations, logging settings, and more.</p>"},{"location":"components/shared/models/","title":"Shared Models","text":"<p>This section will document the shared data models used across services.</p>"},{"location":"components/userservice/api/","title":"User Service API","text":""},{"location":"components/userservice/api/#endpoints","title":"Endpoints","text":""},{"location":"components/userservice/api/#register-user","title":"Register User","text":"<ul> <li>Method: POST</li> <li>Path: <code>/api/users/register</code></li> <li>Description: Registers a new user.</li> </ul>"},{"location":"components/userservice/api/#login-user","title":"Login User","text":"<ul> <li>Method: POST</li> <li>Path: <code>/api/users/login</code></li> <li>Description: Logs in a user.</li> </ul>"},{"location":"components/userservice/api/#update-profile","title":"Update Profile","text":"<ul> <li>Method: PUT</li> <li>Path: <code>/api/users/profile</code></li> <li>Description: Updates the user's profile.</li> </ul>"},{"location":"components/userservice/event-handlers/","title":"User Service Event Handlers","text":""},{"location":"components/userservice/event-handlers/#subscriptionjobevent","title":"SubscriptionJobEvent","text":"<ul> <li>Description: Published when a subscription job is processed.</li> <li>Handler: Processes the event to filter jobs and notify users.</li> </ul>"},{"location":"components/userservice/models/","title":"User Service Models","text":""},{"location":"components/userservice/models/#user","title":"User","text":"<ul> <li>Fields:</li> <li><code>id</code>: Long</li> <li><code>name</code>: String</li> <li><code>email</code>: String</li> <li><code>password</code>: String</li> <li><code>role</code>: String (e.g., \"JobSeeker\", \"Employer\")</li> </ul>"},{"location":"components/userservice/models/#subscription","title":"Subscription","text":"<ul> <li>Fields:</li> <li><code>id</code>: Long</li> <li><code>userId</code>: Long</li> <li><code>jobType</code>: String</li> <li><code>location</code>: String</li> <li><code>minSalary</code>: Double</li> <li><code>lastNotificationDate</code>: LocalDate</li> </ul>"},{"location":"components/userservice/overview/","title":"User Service Overview","text":"<p>The User Service manages user-related operations, including registration, login, and profile updates. It interacts with the database to store user information.</p>"},{"location":"components/userservice/scheduled-jobs/","title":"User Service Scheduled Jobs","text":""},{"location":"components/userservice/scheduled-jobs/#daily-notification-job","title":"Daily Notification Job","text":"<ul> <li>Description: Sends daily notifications to users based on their subscriptions.</li> <li>Cron Expression: <code>0 0 12 * * ?</code> (Executes daily at 12:00 PM)</li> <li>Logic: Fetches subscriptions that haven't been notified today and publishes events for notification.</li> </ul>"},{"location":"infrastructure/cicd/","title":"CI/CD","text":"<p>This section will cover the CI/CD pipeline setup, including build, test, and deployment stages.</p>"},{"location":"infrastructure/cloud-services/","title":"Cloud Services","text":"<p>This section will cover cloud services used in the project, such as AWS, GCP, or Azure.</p>"},{"location":"infrastructure/deployment/","title":"Deployment","text":"<p>This section will cover deployment strategies and configurations.</p>"},{"location":"infrastructure/logging/","title":"Logging","text":"<p>This section will cover logging configurations and best practices.</p>"},{"location":"infrastructure/monitoring/","title":"Monitoring","text":"<p>This section will cover monitoring tools and configurations used in the project.</p>"},{"location":"setup/environment-configuration/","title":"Environment Configuration","text":"<p>This section will guide you through configuring the environment for the project.</p>"},{"location":"setup/environment-configuration/#application-properties","title":"Application Properties","text":"<p>The application uses the <code>application.yml</code> file for configuration. Below are some key properties:</p> <ul> <li>Database Configuration:</li> </ul> <p><code>yaml   spring:     datasource:       url: jdbc:postgresql://localhost:5432/spring-modulith       username: dev_user       password: dev_password</code></p> <ul> <li>RabbitMQ Configuration:</li> </ul> <p><code>yaml   spring:     rabbitmq:       host: localhost       port: 5672</code></p> <ul> <li>Server Configuration:   <code>yaml   server:     port: 8080</code></li> </ul>"},{"location":"setup/environment-configuration/#environment-variables","title":"Environment Variables","text":"<p>You can override the default configurations using environment variables:</p> <ul> <li><code>SPRING_DATASOURCE_URL</code></li> <li><code>SPRING_DATASOURCE_USERNAME</code></li> <li><code>SPRING_DATASOURCE_PASSWORD</code></li> <li><code>SPRING_RABBITMQ_HOST</code></li> <li><code>SPRING_RABBITMQ_PORT</code></li> </ul>"},{"location":"setup/environment-configuration/#profiles","title":"Profiles","text":"<p>The application supports multiple profiles (e.g., <code>dev</code>, <code>prod</code>). You can specify the active profile using:</p> <pre><code>-Dspring.profiles.active=dev\n</code></pre>"},{"location":"setup/installation-steps/","title":"Installation Steps","text":"<p>This section will guide you through the installation steps for the project.</p>"},{"location":"setup/installation-steps/#prerequisites","title":"Prerequisites","text":"<ul> <li>Java 21: Ensure Java 21 is installed.</li> <li>Maven: Install Maven for build and dependency management.</li> <li>Docker: Install Docker and Docker Compose.</li> </ul>"},{"location":"setup/installation-steps/#steps","title":"Steps","text":"<ol> <li>Clone the Repository:</li> </ol> <p><code>bash    git clone https://github.com/your-repo/spring-modulith-example.git    cd spring-modulith-example</code></p> <ol> <li>Build the Project:</li> </ol> <p><code>bash    ./mvnw clean install</code></p> <ol> <li>Start Docker Services:</li> </ol> <p><code>bash    docker-compose -f compose.yaml up -d</code></p> <ol> <li>Run the Application:</li> </ol> <p><code>bash    ./mvnw spring-boot:run</code></p> <ol> <li>Access the Application:</li> <li>The application will be available at <code>http://localhost:8080</code>.</li> </ol>"},{"location":"setup/local-development/","title":"Local Development Setup","text":"<p>This section will guide you through setting up the project for local development.</p>"},{"location":"setup/local-development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Java 21: Ensure you have Java 21 installed.</li> <li>Maven: Build and dependency management tool.</li> <li>Docker and Docker Compose: Required for running services like PostgreSQL and RabbitMQ.</li> </ul>"},{"location":"setup/local-development/#steps","title":"Steps","text":"<ol> <li>Clone the Repository:</li> </ol> <p><code>bash    git clone https://github.com/your-repo/spring-modulith-example.git    cd spring-modulith-example</code></p> <ol> <li>Start Docker Services:    Use the provided <code>compose.yaml</code> file to start the required services:</li> </ol> <p><code>bash    docker-compose -f compose.yaml up -d</code></p> <p>This will start:</p> <ul> <li>PostgreSQL: Accessible on port <code>5433</code>.</li> <li> <p>RabbitMQ: Accessible on port <code>5672</code>.</p> </li> <li> <p>Build the Project:    Use Maven to build the project:</p> </li> </ul> <p><code>bash    ./mvnw clean install</code></p> <ol> <li>Run the Application:    Start the Spring Boot application:</li> </ol> <p><code>bash    ./mvnw spring-boot:run</code></p> <ol> <li>Access the Application:</li> <li>The application will be available at <code>http://localhost:8080</code>.</li> <li>API Gateway routes:<ul> <li>User Service: <code>http://localhost:8080/api/users</code></li> <li>Job Service: <code>http://localhost:8080/api/jobs</code></li> <li>Notification Service: <code>http://localhost:8080/api/notifications</code></li> </ul> </li> </ol>"},{"location":"setup/local-development/#additional-notes","title":"Additional Notes","text":"<ul> <li> <p>Database Configuration:   The application connects to PostgreSQL using the following credentials (defined in <code>application.yml</code>):</p> </li> <li> <p>URL: <code>jdbc:postgresql://localhost:5432/spring-modulith</code></p> </li> <li>Username: <code>dev_user</code></li> <li> <p>Password: <code>dev_password</code></p> </li> <li> <p>Logging:   Logs are stored in the <code>logs/</code> directory.</p> </li> <li> <p>Testing:   Use the following command to run tests:   <code>bash   ./mvnw test</code></p> </li> </ul>"},{"location":"techstack/libraries-and-versions/","title":"Libraries and Versions","text":"<p>This section lists the libraries and their versions used in the project.</p>"},{"location":"techstack/libraries-and-versions/#libraries","title":"Libraries","text":"<ul> <li>Spring Boot: 3.0.0</li> <li>Spring Data JPA: 3.0.0</li> <li>Spring Cloud Gateway: 3.0.0</li> <li>Spring Modulith: 1.0.0</li> <li>Spring GraphQL: 1.0.0</li> <li>Lombok: 1.18.24</li> <li>PostgreSQL Driver: 42.3.1</li> <li>Hibernate: 5.6.9.Final</li> <li>JUnit: 5.8.2</li> <li>Mockito: 4.0.0</li> <li>SLF4J: 1.7.32</li> </ul>"},{"location":"techstack/tools-and-frameworks/","title":"Tools and Frameworks","text":"<p>This project uses the following tools and frameworks:</p>"},{"location":"techstack/tools-and-frameworks/#tools","title":"Tools","text":"<ul> <li>Maven: Build and dependency management tool.</li> <li>Docker Compose: Used for managing multi-container Docker applications.</li> <li>Testcontainers: For integration testing with containers.</li> </ul>"},{"location":"techstack/tools-and-frameworks/#frameworks","title":"Frameworks","text":"<ul> <li>Spring Boot: Framework for building Java-based applications.</li> <li>Spring Cloud Gateway: For API gateway and routing.</li> <li>Spring Data JPA: For database access and ORM.</li> <li>Spring Modulith: For modular application development.</li> <li>Spring GraphQL: For building GraphQL APIs.</li> <li>Lombok: For reducing boilerplate code in Java.</li> </ul>"},{"location":"techstack/tools-and-frameworks/#libraries","title":"Libraries","text":"<ul> <li>PostgreSQL Driver: For connecting to PostgreSQL databases.</li> <li>Hibernate: ORM framework for database interactions.</li> <li>JUnit: For unit testing.</li> <li>Mockito: For mocking in tests.</li> <li>SLF4J: For logging.</li> </ul>"}]}